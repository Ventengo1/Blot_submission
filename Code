const width = 125;
const height = 125;

setDocDimensions(width, height);

const lines = [];


const rotationAngle = 45 


lines.push([[0, 0], [5/8 * width, 0]]);
lines.push([[5/8 * width, 0], [5/8 * width, 5/8 * height]]);
lines.push([[5/8 * width, 5/8 * height], [0, 5/8 * height]]);
lines.push([[0, 5/8 * height], [0, 0]]);

bt.translate(lines, [25, 25]);


const smallSquareSize = 17.5;
const smallSquareOffsets = [
  [0, 0],
  [width - smallSquareSize, 0],
  [width - smallSquareSize, height - smallSquareSize],
  [0, height - smallSquareSize]
];

smallSquareOffsets.forEach(([offsetX, offsetY]) => {
  lines.push([[ offsetX, offsetY], [ offsetX + smallSquareSize, offsetY]]);
  lines.push([[offsetX + smallSquareSize, offsetY], [offsetX + smallSquareSize, offsetY + smallSquareSize]]);
  lines.push([[offsetX + smallSquareSize, offsetY + smallSquareSize], [offsetX, offsetY + smallSquareSize]]);
  lines.push([[offsetX, offsetY + smallSquareSize], [offsetX, offsetY]]);
});

 bt.rotate(lines, rotationAngle);


const moundRadius = 15;
const moundX = width / 2;
const moundY = height / 2;
const numPoints = 30;
const angleIncrement = 2 * Math.PI / numPoints;
for (let i = 0; i < numPoints; i++) {
  const angle = i * angleIncrement;
  const x = moundX + moundRadius * Math.cos(angle);
  const y = moundY + moundRadius * Math.sin(angle);
  lines.push([
    [x, y],
    [moundX + moundRadius * Math.cos(angle + angleIncrement), moundY + moundRadius * Math.sin(angle + angleIncrement)]
  ]);
}

drawLines(lines);
